#!/usr/bin/env python

import subprocess
import os

def add_to_bashrc(writestr):
    with open(os.getenv("HOME") + "/.bashrc", "a") as file:
        file.write(writestr)

def bashcall(writestr):
    subprocess.call(writestr, shell=True)

def setup_blender_builds():
    commands = [
        "sudo apt-get install git", # just in case it's not installed
        "mkdir ~/blender && mkdir ~/blender/software && mkdir ~/blender/software/blender && cd ~/blender/software/blender && mkdir build",
        "git clone https://git.blender.org/blender.git src && cd src",
        "git submodule update --init --recursive && git submodule foreach git checkout master && git submodule foreach git pull --rebase origin master",
        # copy pulled sources, no need to clone again
        "cp -r ~/blender/software/blender ~/blender/software/master",
        "cp -r ~/blender/software/blender ~/blender/software/manipulators",
        "cp -r ~/blender/software/blender ~/blender/software/2.8"
    ]

    for command in commands:
        bashcall(command);

def setup_bash():
    bashcall("ln -s $CUSTOMCONFIG/resources/bash_aliases ~/.bash_aliases")

def setup_vim():
    bashcall("ln -s $CUSTOMCONFIG/resources/vim/vimrc ~/.vimrc && ln -s $CUSTOMCONFIG/resources/vim/.vim/ ~/.vim")

def main():
    customconfig_path = os.path.dirname(os.path.realpath(__file__))
    bashrc_entries = [
        "\n# Generated by " + customconfig_path + "/autosetup.py\n",
        "export CUSTOMCONFIG=" + customconfig_path + "  # path to custom configuration files (directory that contains autosetup.py)\n"
    ]

    for entry in bashrc_entries:
        add_to_bashrc(entry)

    setup_vim()
    setup_bash()
    setup_blender_builds()

if __name__ == "__main__":
    main()
